//Bota escrever tudo em comentarios.
//quando chegares mete aqui o coiso que ja tinhamos feito na aula 



//classes: kitchen, table, bar, chef, waiter, student, dish, order, bill; 
//enums: pratos, bebidas, sobremesas; -->later :(


class Main {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
        System.out.println(Math.random());
    }
}


public class Chef extends Thread{
    
    static enum state{
        WAITING_FOR_AN_ORDER,
        PREPARING_THE_COURSE,
        DISHING_THE_PORTIONS,
        DELIVERING_THE_PORTIONS,
        CLOSING_SERVICE
    };
    
    private int state;
    private Kitchen kitchen;
    private Bar bar;
    
    public Chef(Kitchen kit, Bar bar){
        this.state=1;
        this.kitchen=kit;
        this.bar=bar;
    }
    
    @Override
    public void run(){
        kitchen.watchNews();
        kitchen.startPrep();
        for(int i=0; i<M; i++){
            kitchen.proceedToPresent();
            for(int s=0; s<N; s++){
		        bar.signalWaiter();
		        kitchen.standBy();
		        if(!kitchen.AllPortionsDelivered()){
			        kitchen.HaveNextPortionReady();
                }
            }
            if(!kitchen.AllOrdersDelivered()){
                kitchen.contPrep();
            }
        kitchen.cleanup();
        }
    }
}

public class Waiter extends Thread{
    
    static enum state{
        APPRAISING_SITUATION,
        PRESENTING_THE_MENU,
        TAKING_THE_ORDER,
        PLACING_THE_ORDER,
        WAITING_FOR_PORTION,
        PROCESSING_THE_BILL
    };
    
    private state st;
    private Table table;
    private Kitchen kitchen;
    private Bar bar;
    
    public Waiter(Kitchen kit, Bar bar, Table tab){
        this.st=state.APPRAISING_SITUATION;
        this.kitchen=kit;
        this.bar=bar;
        this.table=tab;
    }
    
    
    @Override
    public void run(){
        boolean run=true;
        while(run){
            switch(bar.lookAround()){
		        case presentMenu:
                    table.saluteClient();
                    break;

                case takeOrder:
                    table.getOrder();
                    kit.handOrder();
                    break;

                case foodReady:
                    for(int s=0; s<N; s++){
                        kit.collectPortion();
                        table.servePortion();
                    }
                    break;

                case getBill:
                    bar.prepareBill();
                    table.presentBill();
                    table.waitPayment();
                    break;

                case cleanUp:
                    bar.clean();
                    run=false;
            }
        }
    }
}

                
public class Student extends thread{
    
    static enum state {
        GOING_TO_THE_RESTAURANT, 
        TAKING_A_SEAT_AT_THE_TABLE, 
        SELECTING_THE_COURSES,
        ORGANIZING_THE_ORDER,
        CHATTING_WITH_COMPANIONS,
        ENJOYING_THE_MEAL,
        PAYING_THE_MEAL,
        GOING_HOME
    };
    
    private Table table;
    private Bar bar;
    private boolean first;
    private boolean last;
    private state st;
    
    
    public Student(Bar bar, Table table){
        this.st= GOING_TO_THE_RESTAURANT;
        this.table = table;
        this.bar = bar;
    }
    
    
    @Override
    public void run(){
        walk();
        table.sit();
        table.readMenu();
        if(last)
            table.full();
        table.choose();
        if(first){
            while(!table.allChose()){
                table.prepareOrder();
            }
            bar.signalWaiter();
            table.describeOrder();
        }
        table.chat();	// comida chegou alertado pelo waiter
        for(int i=0; i<N; i++){ //3 vezes
            table.eat();
            if(table.lastToEat() && i<N-1){
                bar.signalWaiter();
                table.chat();
            }
        }
        if(table.lastArriving){
            bar.signalWaiter();
            table.payBill();
            table.waitReceipt();
            goHome();
        }else{
            goHome();
        }
    }
}
     

public class Order{
    private int numberOfStudents=0;
    private int dishesPerStudent=0;
    
    public synchronized void setNumStudents(int num){
        this.numberOfStudents=num;
    }
    
    public synchronized void setDishPerStudents(int num){
        this.dishesPerStudent=num;
    }
    
    public synchronized int getDishPerStudents(){
        return this.dishesPerStudent;
    }
    
    public synchronized int getNumStudents(){
        return this.numberOfStudents;
    }
}



public class Kitchen {    
    
    private boolean news=true;
    
    public synchronized void watchNews(){
        while(news){
            this.wait();
        }
    }
    
    public synchronized void startPrep(){
        
    }
    
    public synchronized void proceedToPresent(){
        
    }
    
    public synchronized void standBy(){
        
    }
    
    public synchronized void allPortionsDelivered(){
        
    }
    
    public synchronized void haveNextPortionReady(){
        
    }
    
    public synchronized void allOrdersDelivered(){
        
    }
    
    public synchronized void contPrep(){
        
    }
    
    public synchronized void cleanup(){
        
    }

    public synchronized void handOrder() { //waiter
        news=false;
        this.notifyAll();
    }

    public synchronized void collectPortion() { //waiter
        
    }
}




public enum Event {
    presentMenu,
    takeOrder,
    foodReady,
    getBill,
    cleanUp
}
     
     
     
     
     
     
     
     
